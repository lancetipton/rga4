{"version":3,"file":"rga4.esm.js","sources":["../src/helpers/buildContentScript.js","../src/GAController.js"],"sourcesContent":["/**\n * Generates the code needed to initialize google analytics 4\n * <br/> Taken from https://developers.google.com/analytics/devguides/collection/ga4\n * @function\n * @param {Class Instance|Object} GA4Instance - Instance of the GAController class\n *\n * @returns {string} - Inner HTML content for the GTag Script Dom element\n */\nconst getScriptContent = GA4Instance => `\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n  gtag('config', '${GA4Instance.gaCode}', ${JSON.stringify(\n  GA4Instance.config\n)});\n`\n\n/**\n * Builds the code to be used as the Inner HTML content for the GTag Script Dom element\n * @function\n * @param {Class Instance|Object} GA4Instance - Instance of the GAController class\n *\n * @returns {string} - Inner HTML content for the GTag Script Dom element\n */\nconst buildScriptContent = GA4Instance => {\n  const content = getScriptContent(GA4Instance)\n\n  return !GA4Instance.extraGaCodes\n    ? content\n    : GA4Instance.extraGaCodes.reduce(\n        (content, code) => content + `gtag('config', '${code}');\\n`,\n        content\n      )\n}\n\n/**\n * Builds a script dom node that initializes gtag\n * <br/> Initialization code taken from https://developers.google.com/analytics/devguides/collection/ga4\n * @function\n * @param {Class Instance|Object} GA4Instance - Instance of the GAController class\n * @param {Dom Node|Object} head - Current documents Head Dom element\n *\n * @returns {Dom Node|Object} - GTag Script Dom element\n */\nexport const buildContentScript = (GA4Instance, head) => {\n  const script = document.createElement('script')\n  script.innerHTML = buildScriptContent(GA4Instance)\n  head.appendChild(script)\n\n  return script\n}\n","import { buildScriptTags } from './helpers/buildScriptTags'\n\nexport const GA4Singleton = {}\n\n/**\n * GAController\n * Class required to manage google analytics 4\n * @class GAController\n * @param {string} gaCode - Google Analytic 4 Measurement ID\n * @param {string} options - Custom analytic config options\n *\n * @returns {Class Instance|Object} GAController instance\n */\nexport class GAController {\n  constructor(gaCode, options = {}) {\n    const { gaCodes, ...config } = options\n    this.config = config\n    this.gaCode = gaCode\n    this.extraGaCodes = gaCodes || []\n    this.initialized = false\n  }\n\n  /**\n   * Sets the singleton to initialized, and adds methods\n   * @function\n   *\n   * @returns {Object} GA4Singleton\n   */\n  setSingleton = () => {\n    Object.assign(GA4Singleton, {\n      initialized: true,\n      pageview: this.pageview,\n      event: this.event,\n      gtag: this.gtag,\n    })\n\n    return GA4Singleton\n  }\n\n  /**\n   * Return main function for send ga4 events, pageview etc\n   * @function\n   *\n   * @returns {Class} GAController instance\n   */\n  initialize = () => {\n    return new Promise((resolve, reject) => {\n      GAController.isInitialized()\n        ? reject(new Error('Google Analytics has already been initialized!'))\n        : buildScriptTags(this, resolve, reject)\n    })\n  }\n\n  /**\n   * Send pageview event to gtag\n   * @function\n   * @param {string} path - Name of the action for the event\n   * @param {string} location - Extra string identifier of the event\n   * @param {string} title - Group the event belongs to\n   *\n   * @returns {*} Response from the global gtag method\n   */\n  pageview = (path, location, title) => {\n    return this.gtag('event', 'page_view', {\n      page_path: path,\n      page_location: location || window.location,\n      page_title: title || document.title,\n    })\n  }\n\n  /**\n   * Build a predefined event and send to gtag\n   * @function\n   * @param {string} action - Name of the action for the event\n   * @param {string} label - Extra string identifier of the event\n   * @param {string} category - Group the event belongs to\n   * @param {boolan} [nonInteraction=false] - True if event was not fired from user interaction\n   *\n   * @returns {*} Response from the global gtag method\n   */\n  event = (action, label, category, nonInteraction = false) => {\n    return this.gtag('event', action, {\n      event_label: label,\n      event_category: category,\n      non_interaction: nonInteraction,\n    })\n  }\n\n  /**\n   * Build event and send to gtag\n   * @function\n   * @param {string} action - Name of the action for the event\n   * @param {Object} props - Properties of the custom event\n   *\n   * @returns {*} Response from the global gtag method\n   */\n  customEvent = (action, props = {}) => {\n    return this.gtag('event', action, props)\n  }\n\n  /**\n   * Direct access to ga\n   * @function\n   * @param {Object} args - Arguments for the global ga method\n   *\n   * @returns {*} Response from the global ga method\n   */\n  ga = (...args) => window.ga(...args)\n\n  /**\n   * Direct access to gtag\n   * @param {Object} args - Arguments for the global gtag method\n   *\n   * @returns {*} Response from the global gtag method\n   */\n  gtag = (...args) => window.gtag(...args)\n}\n\n/**\n * Check if google analytics is initialized\n * @function\n *\n * @returns {boolean} - True if google analytics is initialized\n */\nGAController.isInitialized = () => {\n  return GA4Singleton.initialized\n}\n\n/**\n * Get RGA4 singleton instance if it's initialized\n * @function\n *\n * @returns {Object} - GA4Singleton\n */\nGAController.getInstance = () => {\n  return GAController.isInitialized()\n    ? GA4Singleton\n    : console.warn('Google Analytics is not initialized')\n}\n"],"names":["GAController"],"mappings":"moDAQA,ywECoHAA,iDAUAA"}