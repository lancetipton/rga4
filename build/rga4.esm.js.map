{"version":3,"file":"rga4.esm.js","sources":["../src/ga4/GAController.js","../src/context/rga4Provider.js"],"sourcesContent":["/**\n * @import {GA4Singleton, PageViewEvent, UAEvent} from '../../index.d.ts'\n */\n\nimport { buildScriptTags } from '../helpers/buildScriptTags'\nimport { mapEventKeys } from '../helpers/mapEventKeys'\nimport { GA4Singleton } from './GA4Singleton'\n\n/**\n * @class GAController\n * @desc Class required to manage google analytics 4\n * @export\n * @param {string} gaCode - Google Analytic 4 Measurement ID\n * @param {string} [options={}] - Custom analytic config options\n * @param {string} options.gaCodes - Additional Measurement IDs\n *\n * @returns {GAController} GAController instance\n */\nexport class GAController {\n  constructor(gaCode, options = {}) {\n    const { gaCodes, ...config } = options\n    this.config = config\n    this.gaCode = gaCode\n    this.extraGaCodes = gaCodes || []\n    this.initialized = false\n  }\n\n  /**\n   * Sets the singleton to initialized, and adds methods\n   * @memberof GAController\n   * @instance\n   * @function\n   * @private\n   * @returns {Object} GA4Singleton\n   */\n  setSingleton = () => {\n    Object.assign(GA4Singleton, {\n      initialized: true,\n      pageView: this.pageView.bind(this),\n      uaEvent: this.uaEvent.bind(this),\n      event: this.event.bind(this),\n      gtag: this.gtag.bind(this),\n    })\n\n    return GA4Singleton\n  }\n\n  /**\n   * Builds the google analytics scripts tags\n   * Then initializes and returns the GA4Singleton object\n   * @memberof GAController\n   * @instance\n   * @function\n   * @private\n   * @returns {Class} GAController instance\n   */\n  initialize = () => {\n    return new Promise((resolve, reject) => {\n      GAController.isInitialized()\n        ? reject(new Error('Google Analytics has already been initialized!'))\n        : buildScriptTags(this, resolve, reject)\n    })\n  }\n\n  /**\n   * Shortcut helper so send a page view event\n   * @function\n   * @memberof GAController\n   * @instance\n   * @param {PageViewEvent} event\n   *\n   * @returns {*} Response from the global gtag method\n   */\n  pageView = ({ location = window.location, title = document.title }) => {\n    const event = mapEventKeys({ location, title }, 'PAGE_VIEW')\n\n    return this.gtag('event', 'page_view', event)\n  }\n\n  /**\n   * Build a predefined event and send to gtag\n   * @function\n   * @memberof GAController\n   * @instance\n   * @param {UAEvent} event\n   *\n   * @returns {*} Response from the global gtag method\n   */\n  uaEvent = event => {\n    const { action, ...eventData } = event\n    const uaEvent = mapEventKeys(eventData, 'UA_EVENT_PROPS')\n\n    return this.gtag('event', action, uaEvent)\n  }\n\n  /**\n   * Build event and send to gtag\n   * @function\n   * @memberof GAController\n   * @instance\n   * @param {string} name - What the event should be called\n   * @param {object} props - Key/values pairs of properties of the event\n   *\n   * @example\n   * event({\n   *   name: 'Button Click',\n   *   time: new Date(),\n   *   user: 'anon',\n   * })\n   *\n   * @returns {*} Response from the global gtag method\n   */\n  event = (name, props) => {\n    // TODO: getting an odd error with typeof\n    // Can't use typeof name !== 'object' to validate the props\n    // Need to investigate\n\n    // Check if name is an object, which allows calling this method with just an object \n    if(typeof name !== 'string' && !props){\n      props = name\n      name = props.name\n      delete props.name\n    }\n\n    // Validate the arguments are correct, else show a warning\n    if(!name || typeof name !== 'string')\n      return console.warn(`Invalid event arguments. Action name and properties are required!`)\n\n    return this.gtag('event', name, props)\n  }\n\n  /**\n   * Direct access to ga\n   * @function\n   * @memberof GAController\n   * @instance\n   * @param {Object} args - Arguments for the global ga method\n   *\n   * @returns {*} Response from the global ga method\n   */\n  ga = (...args) => window.ga(...args)\n\n  /**\n   * Direct access to gtag\n   * @function\n   * @memberof GAController\n   * @instance\n   * @param {Object} args - Arguments for the global gtag method\n   *\n   * @returns {*} Response from the global gtag method\n   */\n  gtag = (...args) => window.gtag(...args)\n}\n\n/**\n * Check if google analytics is initialized\n * @function\n * @memberof GAController\n * @static\n * @private\n *\n * @returns {boolean} - True if google analytics is initialized\n */\nGAController.isInitialized = () => {\n  return GA4Singleton.initialized\n}\n\n/**\n * Get RGA4 singleton instance if it's initialized\n * @function\n * @memberof GAController\n * @private\n * @static\n * @param {boolean} showWarn - Show warning when singleton is not initialized\n *\n * @returns {Object} - GA4Singleton\n */\nGAController.getInstance = showWarn => {\n  return GAController.isInitialized()\n    ? GA4Singleton\n    : showWarn && console.warn('Google Analytics is not initialized')\n}\n","/** @module Context */\n \nimport React, { useState, useEffect } from 'react'\nimport { RGA4Context } from './rga4Context'\nimport { GAController } from '../ga4/GAController'\n\n/**\n * Initializes GA4, then injects the GA4Singleton into the children's props\n * @function\n * @private\n * @param {Object} props - Data to initialize Google Analytic 4\n * @param {string} props.code - Main Google Analytic Measurement ID\n * @param {Object} props.config - Config options for gtag method call\n * @param {Array} props.gaCodes - Extra GA4 Measurement ID's\n * @param {Array|Object} props.children - Children who will have the GA4 Singleton injected into their props\n * @param {function} setChildren - callback to update the passed in props.children\n *\n * @returns {void}\n */\nconst initializeGA4 = async (props, setRGA4) => {\n  const { code, config, gaCodes } = props\n  const GA4Instance = new GAController(`${code}`, config, gaCodes)\n  const rga4 = await GA4Instance.initialize()\n  setRGA4(rga4)\n}\n\n/**\n * @typedef RGA4Provider\n * @desc Context Provider used to set the Goggle Analytics Context.\n * @function\n * @param {Object} props - RGA4 provider props\n * @param {Object|Array} props.children - Child components to wrap the with theme provider\n * @param {string} props.code - Google Analytics measurement ID to use for tracking\n * @param {Object} props.config - Custom Google Analytics config\n * @param {boolean} props.gaCodes - Extra google analytics\n * @export\n * @example\n * const App = () => {\n *   return (\n *     <RGA4Provider code={'Measurement-ID'} config={{ debug: true }} >\n *        <EvfSessions />\n *     </RGA4Provider>\n *   )\n * }\n *\n * export default App\n *\n * @returns {Component|Object} - RGA4Provider.Provider - Provides RGA4 Singleton to the consumer\n */\nexport const RGA4Provider = ({ children, ...props }) => {\n  const [rga4, setRGA4] = useState(GAController.getInstance())\n\n  useEffect(() => {\n    !GAController.isInitialized() && initializeGA4(props, setRGA4)\n  }, [props, rga4, setRGA4])\n\n  return (\n    <RGA4Context.Provider value={rga4}>\n      { children }\n    </RGA4Context.Provider>\n  )\n} "],"names":["GAController"],"mappings":"4yKAmKAA,iDAcAA,6GC9JA"}